C++ 입출력 기초

스트림(stream)
데이터의 흐름, 혹은 데이타를 전송하는 소프트웨어 모듈
흐르는 시내와 유사한 개념

스트림의 양 끝에는 프로그램과 장치 연결
보낸 순서대로 데이터 전달
입출력 기본 단위 : 바이트

C++ 스트림 종류
입력 스트림
입력 장치, 네트워크, 파일로부터 데이터를 프로그램으로 전달하는 스트림
출력 스트림
프로그램에서 출력되는 데이터를 출력 장치, 네트워크, 파일로 전달하는 스트림


C++ 입출력 스트림 버퍼

C++ 입출력 스트림은 버퍼를 가짐
키 입력 스트림의 버퍼
목적
입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장
키 입력 도중 수정 가능
<Backspace> 키가 입력되면 이전에 입력된 키를 버퍼에서 지움
C++ 응용 프로그램은 사용자의 키 입력이 끝난 시점에서 읽음
<Enter> 키 : 키 입력의 끝을 의미
<Enter> 키가 입력된 시점부터 키 입력 버퍼에서 프로그램이 읽기 시작
스크린 출력 스트림 버퍼
목적
프로그램에서 출력된 데이터를 출력 장치로 보내기 전에 일시 저장
출력 장치를 반복적으로 사용하는 비효율성 개선
버퍼가 꽉 차거나 강제 출력 명령 시에 출력 장치에 출력


입출력 클래스 소개

ios 모든 입출력 스트림 클래스들의 기본클래스. 스트림입출력에 필요한 공통함수와 상수. 멤버 변수 선언
istream/ostream/iostream istream은 문자 단위 입력 스트림. ostream은 문자 단위 출력 스트림. iostream은 문자 단위로 입출력을 동시에 할 수 있는 스트림 클래스
ifstream/ofstream/fstream 파일에서 읽고 쓰는 기능을가진 파일 입출력 스트림 클래스. 파일에서 읽을 때는 ifstream 클래스를 파일에 쓸 때는 ofstream클래스. 읽고 쓰기를 동시에 할 때 fstream클래스 이용

C++ 표준 입출력 스트림 객체
C++ 프로그램이 실행될 때 자동으로 생겨나는 스트림 
cin
istream 타입의 스트림 객체로서 키보드 장치와 연결
cout
ostream 타입의 스트림 객체로서 스크린 장치와 연결
cerr
ostream 타입의 스트림 객체로서 스크린 장치와 연결
오류 메시지를 출력할 목적
스트림 내부 버퍼 거치지 않고 출력
clog
ostream 타입의 스트림 객체로서 스크린 장치와 연결
오류 메시지를 출력할 목적
스트림 내부에 버퍼 거쳐 출력


ostream의 멤버 함수를 이용한 문자 출력

ostream 멤버 함수
ostream& put(char ch)
ch의 문자를 스트림에 출력
ostream& write(char*str,int n)
str 배열에 있는 n개의 문자를 스트림에 출력
ostream&flush()
현재 스트림 버퍼에 있는 내용 강제 출력

istream 멤버 함수 – 문자 입력, get() 함수
int get()
입력 스트림에서 문자를 읽어 리턴. 오류나 EOF를 만나면 -1(EOF)리턴
istream& get(char &ch)
입력 스트림에서 문자를 읽어 ch에 저장현재 입력 스트림 객체(*this)의 참조 리턴 오류나 EOF를 만나면 스트림내부의 오류 플래그(falibit) 세팅

문자열 입력

istream& get(char*s,int n)
입력 스트림으로부터 n-1개의 문자를 읽어 배열s에 저장하고 마지막에 '\0' 문자 삽입
입력도중 '\n'을 만나면'\0'을 삽입하고 리턴

char str[10];
cin.get(str, 10); // 최대 9개의 문자를 읽고 끝에 '\0'를 붙여 str 배열에 저장
cout << str; // str을 화면에 출력
get()이 읽는 도중 <Enter>키(‘\n’)을 만날 때
읽기를 중단하고 리턴
<Enter> 키(‘\n’)는 스트림 버퍼에 남아 있음
다시 get()으로 문자열 읽기를 시도하면 입력 스트림에 남은 ‘\n’키를 만나게 되어바로 리턴. 프로그램은 무한 루프에 빠질 수 있음
이때 이 문제를 해결하기 위해서는 cin.get()이나  cin.ignore(1);를 통해 문자 1개(‘\n’)를 스트림에서 읽어 버려야 함.

포맷 입출력
C++에서도 입출력 시 포맷 지정 가능
C 언어의 printf()와 유사
포맷 입출력 방법 3 가지
포맷 플래그
포맷 함수
조작자


조작자
manipulator, 스트림 조작자(stream manipulator)
조작자는 함수
C++ 표준 라이브러리에 구현된 조작자 : 입출력 포맷 지정 목적
개발자 만의 조작자 작성 가능 : 다양한 목적
매개 변수 없는 조작자와 매개 변수를 가진 조작자로 구분
조작자는 항상 << 나 >> 연산자와 함께 사용됨

삽입 연산자(<<)와 추출 연산자(>>)
삽입 연산자(<<)
insertion operator, 삽입자라고도 부름
<< 연산자는 C++의 기본 연산자 : 정수 시프트 연산자

