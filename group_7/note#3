클래스
객체를 만들어내기 위해 정의된 설계도, 틀
클래스는 객체가 아님. 실체도 아님
멤버 변수와 멤버 함수 선언

객체
객체는 생성될 때 클래스의 모양을 그대로 가지고 탄생
멤버 변수와 멤버 함수로 구성
메모리에 생성, 실체(instance)라고도 부름
하나의 클래스 틀에서 찍어낸 여러 개의 객체 생성 가능
객체들은 상호 별도의 공간에 생성

클래스 작성
멤버 변수와 멤버 함수로 구성
클래스 선언부와 클래스 구현부로 구성

클래스 선언부(class declaration)
class 키워드를 이용하여 클래스 선언

멤버 변수와 멤버 함수 선언
멤버 함수는 원형(prototype) 형태로 선언

멤버에 대한 접근 권한 지정
private, public, protected 중의 하나
디폴트는 private
public : 다른 모든 클래스나 객체에서 멤버의 접근이 가능함을 표시

클래스 구현부(class implementation)
클래스에 정의된 모든 멤버 함수 구현

클래스 선언과 클래스 구현으로 분리하는 이유는 클래스를 다른 파일에서 활용하기 위함

예제 3-1
처음에는
#include <iostream>
using namespace std;
class Circle {
public
      int radius;
      double getArea();

};

double Circle.getArea() {
   return 3.14 * radius * radius;
}

int main() {
   Circle dounut;
   donut.radius = 1;
   double area = donut.getArea();
   cout << "donut 면적은 " << area << endl;

   Circle pizza;
   pizza.radius = 30;
   double area = pizza.getArea();
   cout << "pizza 면적은 " << area << endl;
}
라는 코드를 사용 하였는데
public:은 접근 제어 지시자(access specifier) 라는것을 알게 되었고
Circle::은 C++에서 멤버 함수를 정의할 때 클래스 이름 뒤에 :: 연산자를 사용하여 해당 클래스의 멤버 함수임을 명시한다는 것을 알게됨

그 결과
#include <iostream>
using namespace std;
class Circle {
public:
      int radius;
      double getArea();

};

double Circle::getArea() {
   return 3.14 * radius * radius;
}

int main() {
   Circle dounut;
   donut.radius = 1;
   double area = donut.getArea();
   cout << "donut 면적은 " << area << endl;

   Circle pizza;
   pizza.radius = 30;
   double area = pizza.getArea();
   cout << "pizza 면적은 " << area << endl;
}
라는 코드르 사용 하게 되어 해결함

기본 생성자란?
클래스에 생성자가 하나도 선언되어 있지 않은 경우, 컴파일러가 대신 삽입해주는 생성자
매개 변수 없는 생성자
디폴트 생성자라고도 부름  
